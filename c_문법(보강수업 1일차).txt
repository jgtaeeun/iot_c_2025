1. 함수오버로딩
매개변수 개수
매개변수 타입
매개변수 순서

int main() { }

int main(int argc, char** argv) {}


2. unsigned/signed
컴퓨터는 4바이트를 연산을 한다.

2-1. signed + 8비트 기준 가장 왼쪽이 부호비트
char ch1= 0x9f;     //1001 1111
printf(%#x , ch1);    //1001 1111에서 가장 왼쪽 비트가 1이므로, 2의 보수 체계에서 음수로 해석됩니다. => 11111111 11111111 11111111  10011111 

2-2. unsigned + 8비트 기준으로 잘린다.
unsigned char uch2 = 0x11f;  //0001 0001 1111 (12비트)
char ch2 = 0x11f;
printf("uch2 : %#x , ch2 : %#x \n", uch2, ch2);   //하위 8비트만 저장됩니다: 0001 1111 = 0x1F

2-3. unsigned/signed
unsigned char uch = 0x7f;   //0b   0111  1111
char ch = 0x7f;   //0b   0111  1111

uch = uch << 1;  //0b   1111 1110  0xf9
ch = ch << 1;     //0b   1111 1110 =>11111111 11111111 11111111 11111110  0xfffffffe
printf("uch<< 1 : %#x, ch<< 1 : %#x",uch,ch);


2-4. shift 우측
signed일 경우, 부호비트의 값으로 빈칸 채워준다.
	
uch1 = uch1  >> 1;    //1001 1111  ->0100 1111
ch1 = ch1   >> 1;		//1001 1111 ->()100 1111  ->1100 1111
printf("uch1>> 1 : %#x, ch1>> 1 : %#x\n", uch1, ch1);


*정리하자면
unsigned는 부호를 신경쓰지 않기에 그냥 이진수 계산하면 된다.
하지만 signed는 부호를 신경쓰기에 8비트씩 나눴을 때 가장 왼쪽이 1이면 음수로 판단해서 1로 다 채워진다.
또한 signed의 오른쪽 시프트는 부호비트로 빈칸이 채워진다.