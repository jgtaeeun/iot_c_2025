0. 함수선언, 함수호출, 함수정의
  출력값, 입력값 자료형

1. LValue -변수
  RValue - 상수, 변수

2. 문자열 배열 초기화
2-1. char str[100] = "spring";
2-2. char str2[100];
	str2[0]='s';
	str2[1]='p';
	str2[2]='r';
	str2[3]='i';
	str2[4]='n';
	str2[5]='g';
	str2[6]='\0';
2-3. char str3[100];
	strcpy(str3, "spring");

3. 문자열포인터 배열에서 p[i] 는 문자열의 시작주소를 가리킴.printf는 첫주소가 가리키는 문자열 전체를 출력할 수 있기에 *없이 p[i]해도 된다.
정수 포인터 배열에서는 p[i]는 주소이고, *(p[i])가 정수값임

4. 응용포인터
4-1. 함수포인터
int sum(int a, int b){
	return a+b;
}

int main (){
	int (*p) (int , int);
	p = sum;
	printf("%d", p(10,20));
	return 0;
}

4-2. void포인터
int n = 10;
void * p ;
p = &n;
printf("%d", *(int *)p); 

5. 메모리 동적 할당
malloc, free
- 포인터에 주소를 대입하여 사용한다.
- 사용이 끝난 동적할당공간은 재활용을 위해 반환한다.
int main(){
	int *pi = (int *)malloc(sizeof(int));
	
	free(pi);
	return 0;
}

- 배열처럼 쓸 때는 포인터가 배열명의 역할을 한다.
int main(){

	char str[100];
	char * pc[5];

	for (int i=0; i<5 ; i++){
		scanf("%s",str);
		pc[i]=(char*)malloc(strlen(str)+1); //널문자포함위해서
		★strcpy(pc[i], str);
	}
	for (int i=0; i<5; i++){
		printf("%s", pc[i]);   //문자열배열의 경우, pc[i]그대로 *없이 써도 된다.
		free(pc[i]);
	}
	return 0;
}

6. 사용자 정의 자료형- 구조체
-구조체는 입력, 출력이 여러개일 때 사용하면 좋다.

struct human{
	char name[100];
	int age;
	char *p;
};

int main(void){
	방법1	. human h = {"강산해",80};
	방법2. human h; h.age = 80; strcpy(name, "강산해");
	
	//동적할당
	h.p = (char*) malloc(sizeof(100));
	gets( h.p );
	printf("%s", h.p);
	free(h.p)
	return 0;
}

6-1. 구조체 변수의 초기화와 대입연산
 human h = {"강산해",80} , {"해산강",70};

6-2. 구조체의 멤버로 다른 구조체 사용하기 
6-3. typedef -자료형 재정의 
struct human{
	char name[100];
	int age;
	char *p;
}Human;

int main(){
	Human h ;
	
}

6-4. 구조체 변수를 함수의 매개변수에 사용하기
struct human{
	char name[100];
	int age;

}Human;

void printf_human(Human);
int main(){
	Human h  = {"강산해",80};
	printf_human(h);
	
}
void printf_human(Human h){
	printf("이름:%s, 나이:%d\n", h.name, h.age)
}

6-5. 구조체 포인터 변수 (->)
typedef struct score{
	int kor;
	int mat;
};
int main(void){
	score s = {10,20}
	score *ps = &s;			//포인터변수의 자료형은 동일해야 한다.
	printf("국어점수:%d, 수학점수:%d\0" , (*ps).kor, ps->mat;
	return 0;
}


==============================
13. 변수영역, 데이터 공우
13-1. 지역변수, 전역변수(기본값 0), static (누적), 레지스터변수(전역변수는 안됨. 지역변수만 됨.★주소연산자 사용할 수 없다.)
13-2. 데이터공유는 값이 바뀌러면 주소를 인수로 전달해야한다. ★정적변수나 전역변수와 같이 함수종료 후에도 값이 유지되는 경우에만 주소를 반환한다.

14. 다차원과 포인터 배열
14-1. 2차원int형 배열
int num [][4]={1,2,3,4,5,6};  12345600
int num [3][4] = {{1},{2,3,4,5},{6,7,8}} 1000 2345 6780
int num [3][4]={1,2,3,4,5,6,7,8,9,10,11,12} 1234 5678 9101112

14-2. 2차원 char형 배열
-문자열 상수로 한행씩 초기화, 행의 수 생략가능
char animal[][20] = {"dog","rabbit", "panda", "pig","cow"};

14-3. 행열
num[0] 0행 
num[][0] 0열

14-4. 포인터배열 type * array [size];
- 배열은 포인터들을 원소로 갖는다.
14-4-1. int형 포인터 배열
int ary = {1,2,3};
int * p[3] ;
p[0]=ary;
p[1]= ary+1;
p[2]= ary+2;


printf("%d ", *p[0]);

14-4-2. char형 포인터 배열
char animal[][20] = {"dog","rabbit", "panda", "pig","cow"};
char * pc[5] = animal;
pc[0] = animal;
pc[1]= animal+1;

printf("%s",pc[0]);

14-5. 배열 포인터 type (*array) [size] ;
- 배열을 가리키는 포인터는 배열의 첫번째 요소를 가리키고 , 배열의 크기정보를 알고 있을 수 있다.
14-5.1 . int형  배열포인터
int ary = {1,2,3};
int (*p)[3] = ary;
printf("%d", (*p)[0]);


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void) {
	
	//int ary[2][3] = { {1,2,3},{4,5,6} };
	// 입력 직접 받기
	int ary[2][3];
	

	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < 3; j++) {
			scanf(" %d", &ary[i][j]);
		}
	}


	int(* p)[2][3] = ary;
	

	for (int i = 0; i < 2; i++) {
		for (int j = 0; j < 3; j++) {
			printf("%d ", (*p)[i][j]);
			
		}
		printf("\n");
	}
	return 0;

}

