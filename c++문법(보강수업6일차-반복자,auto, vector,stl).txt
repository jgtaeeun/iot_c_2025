* STL(Standard Template Library)
- 데이터 구조와 알고리즘을 효율적으로 제공하는 라이브러리
- 다양한 자료형에 대해 동작하는 템플릿 기반의 클래스와 함수들로 구성되어 있습니다.

1. 컨테이너 
- 데이터를 저장하고 관리하는 자료구조
   1. 시퀀스 컨테이너 
            - 데이터가 순차적으로 저장되며, 요소들이 저장된 순서대로 접근 가능
            - 인덱스를 사용하거나 반복자를 통해 순차적으로 접근할 수 있습니다.
   2. 연관 컨테이너 
            - 데이터를 키-값 쌍으로 저장
            - 자동으로 정렬되거나 특정 규칙에 따라 데이터를 저장하고 검색할 수 있습니다.
   3. 컨테이너 어댑터 
2. 반복자

=================
1. 시퀀스컨테이너 - 벡터
std::vector는 템플릿 클래스라서, 원하는 타입으로 정의할 수 있습니다.
std::vector와 std::list는 size() 함수를 제공하여 크기를 구할 수 있습니다.
배열은 size() 함수가 없으며, sizeof 연산자를 사용하여 크기를 구해야 합니다.

2. 반복자 
반복자는 포인터처럼 동작하며, *iter는 iter가 가리키는 실제 값을 가져옵니다.

   for (auto it = v.begin(); it < v.end(); it++) {

	        std::cout << *it << std::endl;
        }


std::vector<int>:: iterator iter;은 순방향 반복자 선언  ,begin()은 처음주소, end()은 마지막 원소의 이후주소

std::vector<int>:: reverse_iterator rit;은 역방향 반복자 선언 ,rbegin()은 마지막주소, rend()은 처음 원소의 이전주소
vector <int>::reverse_iterator rit;
//	for (rit = v.rbegin(); rit != v.rend(); rit++)
//	{
//		cout << *rit << endl;
//	}

auto로 간단하게 사용가능


3. 범위기반 for문의 i는 요소값을 가져와 복사하여 저장한다.
i는 인덱스가 아니다.복사한 값이다.
for (auto i: v)
{
 std::cout << i << std::endl;
}

4. begin.end
cout << "v2의 첫번째 요소값: " << *v2.begin() << endl;
cout << "v2의 마지막 요소값: " << *(v2.end()-1) << endl;

vector의 capacity는 size보다 클 수도 있어서 그럴 경우 아무것도 아닌 것을 가리키게 될 수 있으므로 v.end()-1이다.

5.  v.at()
for (auto i = 0; i < v.size(); i++)
{
	cout << v[i] << " " ;
	cout << v.at(i) << endl;  //벡터의 요소를 범위 확인 후 접근 (범위 벗어나면 예외 발생)
}