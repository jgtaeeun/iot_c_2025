1. 정렬
-set은  자동으로 오름차순 정렬
-greater<int>는 STL 함수 객체(functor)로, 기본 비교 기준(less<int>)을 반대로 설정함.
- vector는 자동 정렬되지 않는다 =>sort()함수 이용해 정렬함


#include <iostream>
#include <set>
#include <vector>
#include<algorithm>
using namespace std;

int main()
{
	set <int> s = { 2,3,4,5,9,8 };
	set<int, greater<int>> s2 = { 2,3,5,6,9,8 };
	
	//set은  자동으로 오름차순 정렬
	for (auto e : s) cout << e << " ";
	cout << endl;

	//greater<int>는 STL 함수 객체(functor)로, 기본 비교 기준(less<int>)을 반대로 설정함.
	for (auto e : s2) cout << e << " ";
	cout << endl;

	// vector는 자동 정렬되지 않는다 =>sort()함수 이용해 정렬함
	vector<int > v = { 3,1,4,2 };
	sort(v.begin(), v.end(), greater<int>());


	for (auto e : v) cout << e << " ";
	cout << endl;

	return 0;
}

2. multiset
multiset의 삽입, 반복 출력, 특정 원소의 개수 세기, 그리고 lower_bound, upper_bound의 동작을 보여주는 것입니다.

lower_bound(value)	처음으로 value이 나타나는 위치
upper_bound(value)	 value이 끝나고 나오는 첫 번째 원소의 위치.


3. map
map은 키와 값의 쌍(pair)을 저장하는 컨테이너
map은 자동 정렬 (기본 오름차순) 이 되며, 중복 키는 허용하지 않습니다.

 map은 첫 번째 값(= key) 를 기준으로 자동 정렬됩니다.
즉, map<key, value>에서 항상 key를 기준으로 정렬되며, value는 정렬에 영향을 주지 않습니다.


map<int, string> m;
m.insert(pair<int, string>(40, "me"));
m.insert(pair<int, string>(35, "show"));

map<int, string>::iterator itr;
for (itr = m.begin(); itr != m.end(); itr++) cout << "[" << itr->first << "," << itr->second << "]" << " ";
cout << endl;

출력
[35, show] [40, me]


(*itr).first   // 괄호 생략 불가
itr->first  


4. map 키 자동 할당
map<int, string> m2;
m2[1] = "one";
m2[2] = "two";

for (itr = m2.begin(); itr != m2.end(); itr++) cout << "[" << itr->first << "," << itr->second << "]" << " ";
cout << endl;

[1, one] [2, two]

5.문자열-key, 숫자-value
m3.insert({"one", 1});
{ "one", 1 }은 pair<string, int> 형식입니다. 

key 기준(문자열) 으로 사전 순으로 자동 정렬됩니다.


m3.emplace("two", 2);
emplace()는 내부적으로 pair<string, int>("two", 2)를 직접 생성합니다.

insert()보다 효율적일 수 있음: 불필요한 복사나 이동 없이 객체가 직접 생성됨

6. 
nsert(pair)	m.insert(pair<int, string>(1, "one"));	pair 객체를 만들어서 삽입
insert(init)	m.insert({1, "one"});	pair 형태의 초기화 리스트 사용
emplace()	m.emplace(1, "one");	인자들을 직접 전달해 내부에서 생성