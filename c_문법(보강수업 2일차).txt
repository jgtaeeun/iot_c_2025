1. 상수 - 반드시 선언과 동시에 초기화를 해줘야 합니다.
const int d =  10; 

d가 상수기에 d=12은 안됨
포인트를 통해 변경 또한 안됨. const int* pd = &d;이므로
상수면 포인트도 상수포인트라서 값 변경 불가이다.



2. 변수
int b = 10;
int* pb = &b;
*pb = 12;

const int* pb2 = &b;
*pb2 = 14; (x) - pb2는 상수포인트라서 값변경 안됨.
b = 14;


3. const  , 포인트
3-1. 상수포인트 - 값 변경불가
int b = 10;
const int* pb2 = &b;
*pb2 = 14; (x) - pb2는 상수포인트라서 값변경 안됨.
b = 14;

3-2. 주소값 변경불가
int c = 200;
int d =100;
int* const pc = &c;
pc = &d ; (x) 주소값 변경불가
*pc =40;


3-3. 값, 주소 변경불가
const int* const a; 

4. static 변수
4-1. 정적 지역 변수(static local variable)
한 번만 초기화되고, 함수 호출이 끝나도 값이 유지됩니다.
초기화하지 않으면 0으로 자동 초기화됩니다.
static int c;

4-2. 함수 외부(전역)에서 선언된 경우, 전역 정적 변수(static global variable) 
이 변수를 선언한 파일 내부에서만 접근할 수 있습니다.
다른 파일에서는 이 변수를 볼 수도, 사용할 수도 없습니다.
초기화하지 않으면 0으로 자동 초기화됩니다.

*자바에서 static main의 역할
public static void main(String[] args)는 자바 프로그램의 진입점(entry point)이에요.
static이 붙었기 때문에 클래스를 인스턴스화(객체 생성)하지 않아도 바로 호출 가능해요.

5. 함수이름, 배열이름은 주소이다.

6. 메모리 주소 공간 in C
+-------------------------+
|     코드(Code) 영역     | <- text segment (함수, 실행코드 등), 함수 하나당 한 개 할당


+-------------------------+
|   데이터(Data) 영역     | <- 전역/정적 변수 (초기화된 것)
+-------------------------+
|   BSS 영역              | <- 전역/정적 변수 (초기화되지 않은 것)
+-------------------------+
|   힙(Heap)              | <- malloc 등 동적 메모리
|                         |
+-------------------------+
|   스택(Stack)           | <- 지역변수, 함수 호출 스택
+-------------------------+


|변수/함수|주소 (예시)|의미/위치|
|function()|00007FF78C2613D4|코드 영역 (텍스트 세그먼트, 실행 가능한 코드)|
|local b|000000130878F464|스택(Stack) 영역 (지역 변수)|
|static c|00007FF78C26D1B4|데이터(Data) 세그먼트 (정적 변수)|
|const d|000000130878F484|스택(Stack) 영역 (지역 const 변수)|
|arr|000000130878F4E8|스택(Stack) 영역 (지역 배열)|





=========
c++
1. 참조자 - 선언과 동시에 초기화 되어야함.
- 자신이 참조하는 변수를 대신할 수 있는 또 하나의 이름
- 자신이 참조하는 변수와 동일한 메모리 공간을 가진다.
- 참조자 선언 표시 & 


2.  함수에서 우측값만 받기  &&
void take_rvalue(int&& x) {
    std::cout << x << std::endl;
}

take_rvalue(10);   // OK: 10은 rvalue
int a = 5;
take_rvalue(a);    // ❌ 오류: a는 lvalue