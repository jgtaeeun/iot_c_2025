01. 배열과 포인터
 int ary[5];
 int* pa = ary ;     //ary = &ary[0]
        
*pa = 10 ; // ary[0]=10
*(pa +1) =20 ; // ary[1] =20

printf("pa: %d \n", pa+0);     //ary[0]의 주소
printf("pa + 1 : %d \n", pa+1);   //ary[1]의 주소
//pa+0 , pa+1은 4바이트 차이난다.

printf("pa[1]: %d \n", pa[1])  // pa = ary 이므로 pa[1] = ary[1] , 즉 [ ] == *(  )



배열의 크기를 함수 내에서 알 수 있도록 하려면, 배열을 포인터로 넘길 경우에는 크기를 알 수 없기 때문에 sizeof 연산자가 제대로 작동하지 않습니다. 따라서 배열 크기를 c와 같이 매개변수로 전달하거나, 배열의 끝을 특정 값으로 표시하여 배열 크기를 추적하는 방법을 사용하는 것이 일반적입니다. 

배열에 값을 입력하고 출력하는 함수 [C](./day03/pointer8.c)
- `배열을 출력하는 함수에 필요한 것은 배열명(시작주소)이다.`
- `배열을 입력하는 함수에 필요한 것은 배열명(시작주소)이다.`
- 배열의 크기가 달라도 입출력이 가능하려면 배열 요소의 개수를 알아야 한다. (for문의 조건식을 위해서)

포인터상수 int * const-주소변경불가   //pnum3 = &num4;
데이터상수 const int * - 값 변경불가 //*pn2 = 100;	

02. 문자 
2-1. scanf함수를 사용한 문자 입력  - ★%c앞에 공백 필수!
 scanf(" %c %c ", &ch1, &ch2);

2-2.문자입출력 함수 getchar() , putchar() 
ch = getchar();				//한문자를 읽어오는 함수
putchar(ch);				//한문자를 출력하는 함수 , 개행문자 포함하지 않음
putchar('\n');              //개행문자

2-3. 아스키코드 변환
대문자와소문자 차이 =32 =( 'a'-'A')